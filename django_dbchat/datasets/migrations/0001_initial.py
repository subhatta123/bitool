# Generated by Django 4.2.7 on 2025-06-23 05:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Display name for the data source",
                        max_length=200,
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV File"),
                            ("postgresql", "PostgreSQL"),
                            ("mysql", "MySQL"),
                            ("oracle", "Oracle"),
                            ("sqlserver", "SQL Server"),
                            ("sqlite", "SQLite"),
                            ("api", "REST API"),
                            ("excel", "Excel File"),
                            ("json", "JSON File"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "connection_info",
                    models.JSONField(
                        default=dict,
                        help_text="Connection parameters (encrypted in production)",
                    ),
                ),
                (
                    "schema_info",
                    models.JSONField(
                        default=dict, help_text="Schema and column information"
                    ),
                ),
                (
                    "sample_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Sample data for preview"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("error", "Error"),
                            ("syncing", "Syncing"),
                            ("pending", "Pending"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=50,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_synced", models.DateTimeField(blank=True, null=True)),
                (
                    "sync_frequency",
                    models.CharField(
                        default="manual", help_text="Sync frequency", max_length=50
                    ),
                ),
                (
                    "workflow_status",
                    models.JSONField(
                        default=dict,
                        help_text="Tracks completion of mandatory workflow steps: etl_completed, semantics_completed, query_enabled, dashboard_enabled",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="Soft delete timestamp", null=True
                    ),
                ),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                (
                    "source_lineage",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Source data lineage information",
                    ),
                ),
                (
                    "transformation_history",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="History of transformations applied",
                    ),
                ),
                (
                    "data_quality_score",
                    models.FloatField(
                        blank=True, help_text="Data quality score (0-1)", null=True
                    ),
                ),
                (
                    "estimated_row_count",
                    models.BigIntegerField(
                        blank=True, help_text="Estimated row count", null=True
                    ),
                ),
                (
                    "file_size_bytes",
                    models.BigIntegerField(
                        blank=True,
                        help_text="File size in bytes for file sources",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Source",
                "verbose_name_plural": "Data Sources",
                "db_table": "data_sources",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SemanticColumn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Physical column name", max_length=200
                    ),
                ),
                (
                    "display_name",
                    models.CharField(help_text="Human-readable name", max_length=200),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Column description"),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("date", "Date"),
                            ("datetime", "DateTime"),
                            ("time", "Time"),
                            ("json", "JSON"),
                            ("binary", "Binary"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "semantic_type",
                    models.CharField(
                        blank=True,
                        help_text="Semantic type (dimension, measure, etc.)",
                        max_length=50,
                    ),
                ),
                ("is_nullable", models.BooleanField(default=True)),
                ("is_primary_key", models.BooleanField(default=False)),
                ("is_foreign_key", models.BooleanField(default=False)),
                (
                    "is_measure",
                    models.BooleanField(
                        default=False, help_text="Whether this column is a measure"
                    ),
                ),
                (
                    "is_dimension",
                    models.BooleanField(
                        default=False, help_text="Whether this column is a dimension"
                    ),
                ),
                (
                    "aggregation_default",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("sum", "Sum"),
                            ("avg", "Average"),
                            ("count", "Count"),
                            ("min", "Minimum"),
                            ("max", "Maximum"),
                            ("count_distinct", "Count Distinct"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "business_rules",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Business rules and constraints",
                    ),
                ),
                (
                    "format_string",
                    models.CharField(
                        blank=True, help_text="Display format", max_length=100
                    ),
                ),
                (
                    "sample_values",
                    models.JSONField(
                        blank=True, default=list, help_text="Sample values"
                    ),
                ),
                (
                    "common_filters",
                    models.JSONField(
                        blank=True, default=list, help_text="Common filter conditions"
                    ),
                ),
                (
                    "unique_value_count",
                    models.IntegerField(
                        blank=True, help_text="Estimated unique values", null=True
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "business_glossary_term",
                    models.CharField(
                        blank=True,
                        help_text="Related business glossary term",
                        max_length=200,
                    ),
                ),
                (
                    "data_quality_rules",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Data quality validation rules",
                    ),
                ),
            ],
            options={
                "verbose_name": "Semantic Column",
                "verbose_name_plural": "Semantic Columns",
                "db_table": "semantic_columns",
            },
        ),
        migrations.CreateModel(
            name="SemanticTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Physical table name", max_length=200
                    ),
                ),
                (
                    "display_name",
                    models.CharField(help_text="Human-readable name", max_length=200),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Table description"),
                ),
                (
                    "business_purpose",
                    models.TextField(
                        blank=True, help_text="Business context and purpose"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                (
                    "is_fact_table",
                    models.BooleanField(
                        default=False, help_text="Whether this is a fact table"
                    ),
                ),
                (
                    "is_dimension_table",
                    models.BooleanField(
                        default=False, help_text="Whether this is a dimension table"
                    ),
                ),
                (
                    "primary_key",
                    models.CharField(
                        blank=True, help_text="Primary key column", max_length=200
                    ),
                ),
                (
                    "row_count_estimate",
                    models.BigIntegerField(
                        blank=True, help_text="Estimated row count", null=True
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "data_classification",
                    models.CharField(
                        blank=True, help_text="Data classification level", max_length=50
                    ),
                ),
                (
                    "business_owner",
                    models.CharField(
                        blank=True,
                        help_text="Business owner or steward",
                        max_length=200,
                    ),
                ),
                (
                    "refresh_frequency",
                    models.CharField(
                        default="daily",
                        help_text="Data refresh frequency",
                        max_length=50,
                    ),
                ),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="semantic_tables",
                        to="datasets.datasource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Semantic Table",
                "verbose_name_plural": "Semantic Tables",
                "db_table": "semantic_tables",
            },
        ),
        migrations.CreateModel(
            name="SemanticRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "from_table",
                    models.CharField(
                        db_index=True, help_text="Source table name", max_length=200
                    ),
                ),
                (
                    "to_table",
                    models.CharField(
                        db_index=True, help_text="Target table name", max_length=200
                    ),
                ),
                (
                    "from_column",
                    models.CharField(
                        db_index=True, help_text="Source column name", max_length=200
                    ),
                ),
                (
                    "to_column",
                    models.CharField(
                        db_index=True, help_text="Target column name", max_length=200
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("one_to_one", "One-to-One"),
                            ("one_to_many", "One-to-Many"),
                            ("many_to_one", "Many-to-One"),
                            ("many_to_many", "Many-to-Many"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        help_text="AI confidence in this relationship (0-1)",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether relationship is verified by user",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Relationship description"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "join_type_suggestion",
                    models.CharField(
                        db_index=True,
                        default="INNER",
                        help_text="Suggested JOIN type",
                        max_length=20,
                    ),
                ),
                (
                    "cardinality_estimate",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Estimated cardinality",
                        max_length=50,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Semantic Relationship",
                "verbose_name_plural": "Semantic Relationships",
                "db_table": "semantic_relationships",
            },
        ),
        migrations.CreateModel(
            name="SemanticMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Metric name", max_length=200
                    ),
                ),
                (
                    "display_name",
                    models.CharField(help_text="Human-readable name", max_length=200),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Metric description"),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("simple", "Simple Metric"),
                            ("calculated", "Calculated Metric"),
                            ("ratio", "Ratio Metric"),
                            ("growth", "Growth Metric"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "calculation",
                    models.TextField(help_text="Calculation formula or SQL expression"),
                ),
                (
                    "format_string",
                    models.CharField(
                        blank=True, help_text="Display format", max_length=100
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True, help_text="Unit of measurement", max_length=50
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "business_owner",
                    models.CharField(
                        blank=True,
                        help_text="Business owner of the metric",
                        max_length=200,
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Validation rules for the metric",
                    ),
                ),
                (
                    "base_table",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="datasets.semantictable",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dependent_columns",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Columns used in calculation",
                        to="datasets.semanticcolumn",
                    ),
                ),
            ],
            options={
                "verbose_name": "Semantic Metric",
                "verbose_name_plural": "Semantic Metrics",
                "db_table": "semantic_metrics",
            },
        ),
        migrations.AddField(
            model_name="semanticcolumn",
            name="table",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="columns",
                to="datasets.semantictable",
            ),
        ),
        migrations.CreateModel(
            name="ETLOperation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Operation name", max_length=200
                    ),
                ),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("join", "Join"),
                            ("union", "Union"),
                            ("aggregate", "Aggregate"),
                            ("filter", "Filter"),
                            ("transform", "Transform"),
                            ("pivot", "Pivot"),
                            ("unpivot", "Unpivot"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "source_tables",
                    models.JSONField(
                        default=list, help_text="Source table identifiers"
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(default=dict, help_text="Operation parameters"),
                ),
                (
                    "sql_query",
                    models.TextField(blank=True, help_text="Generated SQL query"),
                ),
                (
                    "output_table_name",
                    models.CharField(help_text="Output table name", max_length=200),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("paused", "Paused"),
                        ],
                        db_index=True,
                        default="draft",
                        max_length=50,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                (
                    "execution_time",
                    models.FloatField(
                        blank=True, help_text="Execution time in seconds", null=True
                    ),
                ),
                (
                    "row_count",
                    models.BigIntegerField(
                        blank=True, help_text="Output row count", null=True
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                (
                    "result_summary",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="ETL operation results summary",
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0, help_text="Number of retry attempts"
                    ),
                ),
                (
                    "data_lineage",
                    models.JSONField(
                        blank=True, default=dict, help_text="Data lineage information"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_operation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent operation if this is a retry",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datasets.etloperation",
                    ),
                ),
            ],
            options={
                "verbose_name": "ETL Operation",
                "verbose_name_plural": "ETL Operations",
                "db_table": "etl_operations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataIntegrationJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Job name", max_length=200
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("sync", "Data Sync"),
                            ("etl", "ETL Pipeline"),
                            ("schema_analysis", "Schema Analysis"),
                            ("relationship_detection", "Relationship Detection"),
                            ("semantic_generation", "Semantic Metadata Generation"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(default=dict, help_text="Job parameters"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=50,
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0, help_text="Progress percentage (0-100)"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "execution_time",
                    models.FloatField(
                        blank=True, help_text="Execution time in seconds", null=True
                    ),
                ),
                (
                    "result_summary",
                    models.JSONField(
                        blank=True, default=dict, help_text="Job results summary"
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("logs", models.TextField(blank=True, help_text="Job execution logs")),
                (
                    "priority",
                    models.IntegerField(
                        default=0,
                        help_text="Job priority (higher number = higher priority)",
                    ),
                ),
                (
                    "scheduled_time",
                    models.DateTimeField(
                        blank=True, help_text="Scheduled execution time", null=True
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0, help_text="Number of retry attempts"
                    ),
                ),
                (
                    "max_retries",
                    models.IntegerField(default=3, help_text="Maximum retry attempts"),
                ),
                (
                    "data_sources",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Related data sources",
                        to="datasets.datasource",
                    ),
                ),
                (
                    "etl_operations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Related ETL operations",
                        to="datasets.etloperation",
                    ),
                ),
                (
                    "started_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Integration Job",
                "verbose_name_plural": "Data Integration Jobs",
                "db_table": "data_integration_jobs",
                "ordering": ["-started_at"],
            },
        ),
        migrations.AddIndex(
            model_name="semantictable",
            index=models.Index(
                fields=["data_source", "name"], name="semantic_ta_data_so_55d62b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="semantictable",
            index=models.Index(
                fields=["is_fact_table", "is_dimension_table"],
                name="semantic_ta_is_fact_2148e6_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="semantictable",
            unique_together={("data_source", "name")},
        ),
        migrations.AddIndex(
            model_name="semanticrelationship",
            index=models.Index(
                fields=["from_table", "to_table"], name="semantic_re_from_ta_077719_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="semanticrelationship",
            index=models.Index(
                fields=["confidence_score", "is_verified"],
                name="semantic_re_confide_8262b2_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="semanticrelationship",
            unique_together={("from_table", "to_table", "from_column", "to_column")},
        ),
        migrations.AddIndex(
            model_name="semanticmetric",
            index=models.Index(
                fields=["created_by", "is_active"],
                name="semantic_me_created_2349c9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="semanticmetric",
            index=models.Index(
                fields=["metric_type", "is_active"],
                name="semantic_me_metric__119c83_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="semanticcolumn",
            index=models.Index(
                fields=["table", "name"], name="semantic_co_table_i_3ef6c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="semanticcolumn",
            index=models.Index(
                fields=["is_measure", "is_dimension"],
                name="semantic_co_is_meas_b10884_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="semanticcolumn",
            index=models.Index(
                fields=["data_type", "semantic_type"],
                name="semantic_co_data_ty_43ed41_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="semanticcolumn",
            unique_together={("table", "name")},
        ),
        migrations.AddIndex(
            model_name="etloperation",
            index=models.Index(
                fields=["created_by", "status"], name="etl_operati_created_b0cfab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="etloperation",
            index=models.Index(
                fields=["operation_type", "status"],
                name="etl_operati_operati_ac8ef8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="etloperation",
            index=models.Index(
                fields=["created_at", "status"], name="etl_operati_created_db8128_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasource",
            index=models.Index(
                fields=["created_by", "status"], name="data_source_created_38bb59_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasource",
            index=models.Index(
                fields=["source_type", "status"], name="data_source_source__40094f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasource",
            index=models.Index(
                fields=["created_at", "status"], name="data_source_created_ff9431_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataintegrationjob",
            index=models.Index(
                fields=["started_by", "status"], name="data_integr_started_5e2a66_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataintegrationjob",
            index=models.Index(
                fields=["job_type", "status"], name="data_integr_job_typ_e17a3d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataintegrationjob",
            index=models.Index(
                fields=["started_at", "status"], name="data_integr_started_6d4ad5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataintegrationjob",
            index=models.Index(
                fields=["priority", "scheduled_time"],
                name="data_integr_priorit_08301f_idx",
            ),
        ),
    ]
